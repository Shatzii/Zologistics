# TruckFlow AI - Central Server Docker Compose
version: '3.8'

services:
  # Main Application Server
  truckflow-api:
    build: .
    container_name: truckflow-api
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - DAT_API_KEY=${DAT_API_KEY}
      - TRUCKSTOP_API_KEY=${TRUCKSTOP_API_KEY}
      - CHROBINSON_API_KEY=${CHROBINSON_API_KEY}
      - CONVOY_API_KEY=${CONVOY_API_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - truckflow-network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: truckflow-postgres
    environment:
      - POSTGRES_DB=truckflow
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - truckflow-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: truckflow-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - truckflow-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: truckflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - truckflow-api
    restart: unless-stopped
    networks:
      - truckflow-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: truckflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - truckflow-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: truckflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - truckflow-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  truckflow-network:
    driver: bridge