import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Shield, 
  Smartphone, 
  Mail, 
  Copy, 
  QrCode,
  CheckCircle,
  AlertCircle,
  Phone
} from "lucide-react";

interface TwoFactorSetupProps {
  onSetupComplete: (method: 'sms' | 'email' | 'totp', secret?: string) => void;
  onSkip: () => void;
}

export default function TwoFactorSetup({ onSetupComplete, onSkip }: TwoFactorSetupProps) {
  const [selectedMethod, setSelectedMethod] = useState<'sms' | 'email' | 'totp'>('totp');
  const [phoneNumber, setPhoneNumber] = useState('+1 205 434 8405');
  const [email, setEmail] = useState('admin@zologistics.com');
  const [verificationCode, setVerificationCode] = useState('');
  const [totpSecret] = useState('JBSWY3DPEHPK3PXP'); // Demo secret
  const [qrCodeUrl] = useState(`otpauth://totp/Zologistics:admin?secret=${totpSecret}&issuer=Zologistics`);
  const [isVerifying, setIsVerifying] = useState(false);
  const [step, setStep] = useState<'setup' | 'verify'>('setup');
  const [error, setError] = useState('');

  const handleSendVerification = async () => {
    setIsVerifying(true);
    setError('');

    // Simulate sending verification code
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    if (selectedMethod === 'sms' && !phoneNumber) {
      setError('Please enter a valid phone number');
      setIsVerifying(false);
      return;
    }

    if (selectedMethod === 'email' && !email) {
      setError('Please enter a valid email address');
      setIsVerifying(false);
      return;
    }

    setStep('verify');
    setIsVerifying(false);
  };

  const handleVerifyCode = async () => {
    setIsVerifying(true);
    setError('');

    // Simulate verification
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Demo verification codes
    const validCodes = {
      sms: '123456',
      email: '789012',
      totp: '123456' // In real implementation, this would be generated by TOTP algorithm
    };

    if (verificationCode === validCodes[selectedMethod]) {
      onSetupComplete(selectedMethod, selectedMethod === 'totp' ? totpSecret : undefined);
    } else {
      setError('Invalid verification code. Please try again.');
    }
    
    setIsVerifying(false);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl border-border">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl flex items-center justify-center">
            <Shield className="h-6 w-6 mr-2 text-primary" />
            Two-Factor Authentication Setup
          </CardTitle>
          <p className="text-muted-foreground">
            Secure your admin account with an additional layer of protection
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          {step === 'setup' && (
            <>
              <Tabs value={selectedMethod} onValueChange={(value) => setSelectedMethod(value as any)}>
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="totp" className="flex items-center">
                    <Smartphone className="h-4 w-4 mr-2" />
                    Authenticator App
                  </TabsTrigger>
                  <TabsTrigger value="sms" className="flex items-center">
                    <Phone className="h-4 w-4 mr-2" />
                    SMS
                  </TabsTrigger>
                  <TabsTrigger value="email" className="flex items-center">
                    <Mail className="h-4 w-4 mr-2" />
                    Email
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="totp" className="space-y-4">
                  <div className="text-center space-y-4">
                    <div className="bg-muted p-4 rounded-lg">
                      <QrCode className="h-32 w-32 mx-auto mb-4 text-muted-foreground" />
                      <p className="text-sm text-muted-foreground mb-2">
                        Scan this QR code with your authenticator app
                      </p>
                      <Badge variant="outline" className="text-xs">
                        {qrCodeUrl}
                      </Badge>
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Or enter this secret manually:</Label>
                      <div className="flex items-center space-x-2">
                        <Input
                          value={totpSecret}
                          readOnly
                          className="font-mono"
                        />
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => copyToClipboard(totpSecret)}
                        >
                          <Copy className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>

                    <Alert>
                      <AlertCircle className="h-4 w-4" />
                      <AlertDescription>
                        Use Google Authenticator, Authy, or any compatible TOTP app
                      </AlertDescription>
                    </Alert>
                  </div>
                </TabsContent>

                <TabsContent value="sms" className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="phone">Phone Number</Label>
                    <Input
                      id="phone"
                      type="tel"
                      placeholder="+1 205 434 8405"
                      value={phoneNumber}
                      onChange={(e) => setPhoneNumber(e.target.value)}
                    />
                  </div>
                  <Alert>
                    <AlertCircle className="h-4 w-4" />
                    <AlertDescription>
                      We'll send a verification code to this phone number
                    </AlertDescription>
                  </Alert>
                </TabsContent>

                <TabsContent value="email" className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="email">Email Address</Label>
                    <Input
                      id="email"
                      type="email"
                      placeholder="admin@zologistics.com"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                    />
                  </div>
                  <Alert>
                    <AlertCircle className="h-4 w-4" />
                    <AlertDescription>
                      We'll send a verification code to this email address
                    </AlertDescription>
                  </Alert>
                </TabsContent>
              </Tabs>

              {error && (
                <Alert className="border-red-200 bg-red-50 dark:bg-red-900/20">
                  <AlertDescription className="text-red-700 dark:text-red-300">
                    {error}
                  </AlertDescription>
                </Alert>
              )}

              <div className="flex justify-between">
                <Button variant="outline" onClick={onSkip}>
                  Skip for Now
                </Button>
                <Button 
                  onClick={handleSendVerification}
                  disabled={isVerifying}
                >
                  {isVerifying ? 'Setting up...' : 'Continue Setup'}
                </Button>
              </div>
            </>
          )}

          {step === 'verify' && (
            <div className="space-y-4">
              <div className="text-center">
                <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
                <h3 className="text-lg font-medium mb-2">Verification Code Sent</h3>
                <p className="text-muted-foreground">
                  {selectedMethod === 'sms' && `We've sent a code to ${phoneNumber}`}
                  {selectedMethod === 'email' && `We've sent a code to ${email}`}
                  {selectedMethod === 'totp' && 'Enter the code from your authenticator app'}
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="verification">Verification Code</Label>
                <Input
                  id="verification"
                  type="text"
                  placeholder="Enter 6-digit code"
                  value={verificationCode}
                  onChange={(e) => setVerificationCode(e.target.value)}
                  maxLength={6}
                  className="text-center text-lg font-mono"
                />
              </div>

              {selectedMethod !== 'totp' && (
                <div className="text-center">
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => setStep('setup')}
                  >
                    Didn't receive code? Try again
                  </Button>
                </div>
              )}

              {error && (
                <Alert className="border-red-200 bg-red-50 dark:bg-red-900/20">
                  <AlertDescription className="text-red-700 dark:text-red-300">
                    {error}
                  </AlertDescription>
                </Alert>
              )}

              <div className="bg-muted p-4 rounded-lg">
                <h4 className="font-medium mb-2">Demo Verification Codes:</h4>
                <div className="text-sm text-muted-foreground space-y-1">
                  <div>SMS (+1 205 434 8405): <code className="bg-background px-1 rounded">123456</code></div>
                  <div>Email (admin@zologistics.com): <code className="bg-background px-1 rounded">789012</code></div>
                  <div>TOTP (Authenticator App): <code className="bg-background px-1 rounded">123456</code></div>
                </div>
              </div>

              <div className="flex justify-between">
                <Button variant="outline" onClick={() => setStep('setup')}>
                  Back
                </Button>
                <Button 
                  onClick={handleVerifyCode}
                  disabled={isVerifying || verificationCode.length !== 6}
                >
                  {isVerifying ? 'Verifying...' : 'Verify & Complete'}
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}